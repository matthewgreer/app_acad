Poke around. You will be writing the Board class, but first get acquainted with the code provided in the Player and Mancala classes.

The gist:

To play, create a new instance of Mancala and call play to kick things off.
< < Mancala#play > > calls < < #take_turn > > alternating players until the game is < < #won? > >
< < Mancala#take_turn > > encapsulates the trickier logic of the game. It relies on the return value of < < Board#make_move > > to determine whether the turn is over or not.

If the player ends in their own cup, the return value should be < < :prompt > >, the turn is not over yet, and < < Mancala#take_turn > > should prompt the current player for the next starting cup.

If the current player ends on a cup that already has stones in it, the return value should be the < < ending_cup_idx > > and the game automatically plays the next turn, since the rules dictate that a player must then pick up the stones in that cup.

If the current player ends on an empty cup (that now has one stone in it), the return value should be < < :switch > >. < < Mancala#take_turn > > will then switch players and repeat the process until someone has won.


Our Board class houses this logic because the next turn is determined by the board's state after interacting with the player.

    NB:

    Run bundle install to make sure you're using the correct version of RSpec!

    Run the specs using the --order default option, like so: bundle exec rspec --order default.

    Do not try calling Mancala#play until you have written the Board class! It won't work.



Writing the Board class

Run the specs. Skim the failed spec messages, along with the outline of the Board class provided. These two things together should give you a sense of how a board is expected to interact with the other classes.

The specs are your instructions; let them guide you!

A few :key: things to note:

player1, name1, and side1 all correspond to the same player.
A cup is an Array of stones. The number of stones in a cup corresponds to its length. An empty cup has the length of 0.
Call Board#render to the board at the end of each move.
Player#prompt requires the input to be either 1..6 or 7..12, but Board#make_move should transpose the bottom half to 0..5. This is based on the assumption that it's more user-friendly to only number the cups they can start with (i.e. not the points stores) and to start numbers at
1. But within our Board class, the points stores are, of course, elements in the array, so we need to account for them.

The player sees and uses:

    12  11  10  9  8  7
[store2]            [store1]
     1   2   3  4  5  6
Our board is actually setup like this:

    12  11  10  9  8  7
[13]                   [6]
     0   1   2  3  4  5
Make sure to account for this difference!

When you have all of your specs passing you are finished!